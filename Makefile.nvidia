

HAMR=/work/SENSEI/HAMR-nv_omp/

MPI_FLAGS=-I/usr/include/mpich-x86_64 -L/usr/lib64/mpich/lib -Wl,-rpath -Wl,/usr/lib64/mpich/lib -Wl,--enable-new-dtags -lmpi
MPI_LINK= -L/usr/lib64/mpich/lib -Wl,-rpath -Wl,/usr/lib64/mpich/lib -Wl,--enable-new-dtags -lmpi

OMP_FLAGS=-mp=gpu -DENABLE_OMP -DENABLE_CUDA
OMP_LINK=

CFLAGS=-lm -Wall -Wextra -fPIE
CLINK=-lm -lstdc++

C_OPT_FLAGS=-O3 -march=native -mtune=native

CUDA_OPT_FLAGS=-O3
CUDA_XOPT_FLAGS=-O3,-march=native,-mtune=native

#module load /work2/cuda/hpc_sdk/modulefiles/nvhpc/23.3
CUDA_LIBS=/work2/cuda/hpc_sdk/Linux_x86_64/23.3/cuda/12.0/lib64/
CC=`which nvc++`

.PHONY: all
all : stream_compact.a newtonpp_nvidia_omp

.PHONY: ics
ics: galaxy_ic plot_ic

.PHONY: clean
clean:
	rm -f *.o stream_compact.a newtonpp_nvidia_omp

stream_compact.a: stream_compact.cu stream_compact.cxx
	$(CC) $(CFLAGS) $(C_OPT_FLAGS) -fPIC stream_compact.cxx -c -o stream_compact_cpu.o
	nvcc $(CUDA_OPT_FLAGS) -arch=sm_75 -dc -o stream_compact_dc.o stream_compact.cu -Xcompiler -fPIE,$(CUDA_XOPT_FLAGS)
	nvcc $(CUDA_OPT_FLAGS) -arch=sm_75 -dlink -o stream_compact.o stream_compact_dc.o -lcudart -Xcompiler -fPIE,$(CUDA_XOPT_FLAGS)
	rm -f stream_compact.a
	ar cru stream_compact.a stream_compact_cpu.o stream_compact.o stream_compact_dc.o
	ranlib stream_compact.a

%.o: %.cpp
	$(CC) $(OMP_FLAGS) $(MPI_FLAGS) $(CFLAGS) $(C_OPT_FLAGS) -I./ -I$(HAMR)/include -c $< -o $@

newtonpp_objs=domain_decomp.o initialize_file.o patch_data.o communication.o \
	initialize_random.o patch.o patch_force.o solver.o write_vtk.o

newtonpp_nvidia_omp:  stream_compact.a $(newtonpp_objs) newton.cpp
	$(CC) $(OMP_FLAGS) $(MPI_FLAGS) $(CFLAGS) $(C_OPT_FLAGS) \
	-I./ -I$(HAMR)/include newton.cpp $(newtonpp_objs) -o $@ \
	$(CLINK) $(MPI_LINK) $(OMP_LINK) $(HAMR)/lib/libhamr.a stream_compact.a \
	${CUDA_LIBS}/libcudart_static.a

galaxy_ic: galaxy_ic.cpp
	g++  $(C_OPT_FLAGS)  galaxy_ic.cpp -o galaxy_ic

plot_ic: plot_ic.cpp
	g++ $(C_OPT_FLAGS)  plot_ic.cpp -o plot_ic
